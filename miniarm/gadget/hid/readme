kernel:linux 4.4
board:miniarm(rk3288)

hid.c:
+/////////////////////jason2016-03-07///////////
+static struct hidg_func_descriptor keyboard_hid_data = {
+	.subclass		= 0, /* No subclass */
+	.protocol		= 1, /* Keyboard */
+	.report_length		= 8,
+	.report_desc_length	= 63,
+	.report_desc		= {
+		0x05, 0x01,	/* USAGE_PAGE (Generic Desktop)	          */
+		0x09, 0x06,	/* USAGE (Keyboard)                       */
+		0xa1, 0x01,	/* COLLECTION (Application)               */
+		0x05, 0x07,	/*   USAGE_PAGE (Keyboard)                */
+		0x19, 0xe0,	/*   USAGE_MINIMUM (Keyboard LeftControl) */
+		0x29, 0xe7,	/*   USAGE_MAXIMUM (Keyboard Right GUI)   */
+		0x15, 0x00,	/*   LOGICAL_MINIMUM (0)                  */
+		0x25, 0x01,	/*   LOGICAL_MAXIMUM (1)                  */
+		0x75, 0x01,	/*   REPORT_SIZE (1)                      */
+		0x95, 0x08,	/*   REPORT_COUNT (8)                     */
+		0x81, 0x02,	/*   INPUT (Data,Var,Abs)                 */
+		0x95, 0x01,	/*   REPORT_COUNT (1)                     */
+		0x75, 0x08,	/*   REPORT_SIZE (8)                      */
+		0x81, 0x03,	/*   INPUT (Cnst,Var,Abs)                 */
+		0x95, 0x05,	/*   REPORT_COUNT (5)                     */
+		0x75, 0x01,	/*   REPORT_SIZE (1)                      */
+		0x05, 0x08,	/*   USAGE_PAGE (LEDs)                    */
+		0x19, 0x01,	/*   USAGE_MINIMUM (Num Lock)             */
+		0x29, 0x05,	/*   USAGE_MAXIMUM (Kana)                 */
+		0x91, 0x02,	/*   OUTPUT (Data,Var,Abs)                */
+		0x95, 0x01,	/*   REPORT_COUNT (1)                     */
+		0x75, 0x03,	/*   REPORT_SIZE (3)                      */
+		0x91, 0x03,	/*   OUTPUT (Cnst,Var,Abs)                */
+		0x95, 0x06,	/*   REPORT_COUNT (6)                     */
+		0x75, 0x08,	/*   REPORT_SIZE (8)                      */
+		0x15, 0x00,	/*   LOGICAL_MINIMUM (0)                  */
+		0x25, 0x65,	/*   LOGICAL_MAXIMUM (101)                */
+		0x05, 0x07,	/*   USAGE_PAGE (Keyboard)                */
+		0x19, 0x00,	/*   USAGE_MINIMUM (Reserved)             */
+		0x29, 0x65,	/*   USAGE_MAXIMUM (Keyboard Application) */
+		0x81, 0x00,	/*   INPUT (Data,Ary,Abs)                 */
+		0xc0		/* END_COLLECTION                         */
+	}
+};
+
+static struct hidg_func_descriptor mouse_hid_data = {
+	.subclass		= 0, /* No subclass */
+	.protocol		= 2, /* mouse */
+	.report_length		= 8,
+	.report_desc_length	= 118,
+	.report_desc		= {
+		 0x05, 0x01,        // USAGE_PAGE (Generic Desktop)
+     0x09, 0x02,        // USAGE (Mouse)
+     0xa1, 0x01,        // COLLECTION (Application)
+     0x09, 0x02,        //   USAGE (Mouse)
+     0xa1, 0x02,        //   COLLECTION (Logical)
+     0x09, 0x01,        //     USAGE (Pointer)
+     0xa1, 0x00,        //     COLLECTION (Physical)
+                        // ------------------------------  Buttons
+     0x05, 0x09,        //       USAGE_PAGE (Button)      
+     0x19, 0x01,        //       USAGE_MINIMUM (Button 1)
+     0x29, 0x05,        //       USAGE_MAXIMUM (Button 5)
+     0x15, 0x00,        //       LOGICAL_MINIMUM (0)
+     0x25, 0x01,        //       LOGICAL_MAXIMUM (1)
+     0x75, 0x01,        //       REPORT_SIZE (1)
+     0x95, 0x05,        //       REPORT_COUNT (5)
+     0x81, 0x02,        //       INPUT (Data,Var,Abs)
+                        // ------------------------------  Padding
+     0x75, 0x03,        //       REPORT_SIZE (3)
+     0x95, 0x01,        //       REPORT_COUNT (1)
+     0x81, 0x03,        //       INPUT (Cnst,Var,Abs)
+                        // ------------------------------  X,Y position
+     0x05, 0x01,        //       USAGE_PAGE (Generic Desktop)
+     0x09, 0x30,        //       USAGE (X)
+     0x09, 0x31,        //       USAGE (Y)
+     0x15, 0x81,        //       LOGICAL_MINIMUM (-127)
+     0x25, 0x7f,        //       LOGICAL_MAXIMUM (127)
+     0x75, 0x08,        //       REPORT_SIZE (8)
+     0x95, 0x02,        //       REPORT_COUNT (2)
+     0x81, 0x06,        //       INPUT (Data,Var,Rel)
+     0xa1, 0x02,        //       COLLECTION (Logical)
+                        // ------------------------------  Vertical wheel res multiplier
+     0x09, 0x48,        //         USAGE (Resolution Multiplier)
+     0x15, 0x00,        //         LOGICAL_MINIMUM (0)
+     0x25, 0x01,        //         LOGICAL_MAXIMUM (1)
+     0x35, 0x01,        //         PHYSICAL_MINIMUM (1)
+     0x45, 0x04,        //         PHYSICAL_MAXIMUM (4)
+     0x75, 0x02,        //         REPORT_SIZE (2)
+     0x95, 0x01,        //         REPORT_COUNT (1)
+     0xa4,              //         PUSH
+     0xb1, 0x02,        //         FEATURE (Data,Var,Abs)
+                        // ------------------------------  Vertical wheel
+     0x09, 0x38,        //         USAGE (Wheel)
+     0x15, 0x81,        //         LOGICAL_MINIMUM (-127)
+     0x25, 0x7f,        //         LOGICAL_MAXIMUM (127)
+     0x35, 0x00,        //         PHYSICAL_MINIMUM (0)        - reset physical
+     0x45, 0x00,        //         PHYSICAL_MAXIMUM (0)
+     0x75, 0x08,        //         REPORT_SIZE (8)
+     0x81, 0x06,        //         INPUT (Data,Var,Rel)
+     0xc0,              //       END_COLLECTION
+     0xa1, 0x02,        //       COLLECTION (Logical)
+                        // ------------------------------  Horizontal wheel res multiplier
+     0x09, 0x48,        //         USAGE (Resolution Multiplier)
+     0xb4,              //         POP
+     0xb1, 0x02,        //         FEATURE (Data,Var,Abs)
+                        // ------------------------------  Padding for Feature report
+     0x35, 0x00,        //         PHYSICAL_MINIMUM (0)        - reset physical
+     0x45, 0x00,        //         PHYSICAL_MAXIMUM (0)
+     0x75, 0x04,        //         REPORT_SIZE (4)
+     0xb1, 0x03,        //         FEATURE (Cnst,Var,Abs)
+                        // ------------------------------  Horizontal wheel
+     0x05, 0x0c,        //         USAGE_PAGE (Consumer Devices)
+     0x0a, 0x38, 0x02,  //         USAGE (AC Pan)
+     0x15, 0x81,        //         LOGICAL_MINIMUM (-127)
+     0x25, 0x7f,        //         LOGICAL_MAXIMUM (127)
+     0x75, 0x08,        //         REPORT_SIZE (8)
+     0x81, 0x06,        //         INPUT (Data,Var,Rel)
+     0xc0,              //       END_COLLECTION
+     0xc0,              //     END_COLLECTION
+     0xc0,              //   END_COLLECTION
+     0xc0               // END_COLLECTION
+	}
+};
+
+
+///////////jason2016-03-07//////////
+
 struct hidg_func_node {
 	struct usb_function_instance *fi;
 	struct usb_function *f;
@@ -272,6 +396,27 @@ static struct platform_driver hidg_plat_driver = {
 };
 
 
+/////////////jason2016-03-07////////
+static struct platform_device keyboard_hid = {
+	.name			= "hidg",
+	.id			= 0,
+	.num_resources		= 0,
+	.resource		= 0,
+	.dev.platform_data	= &keyboard_hid_data,
+};
+
+static struct platform_device mouse_hid = {
+	.name			= "hidg",
+	.id			= 1,
+	.num_resources		= 0,
+	.resource		= 0,
+	.dev.platform_data	= &mouse_hid_data,
+};
+
+
+///////////////jason2016-03-07////////////////
+
+
 MODULE_DESCRIPTION(DRIVER_DESC);
 MODULE_AUTHOR("Fabien Chouteau, Peter Korsgaard");
 MODULE_LICENSE("GPL");
@@ -280,6 +425,24 @@ static int __init hidg_init(void)
 {
 	int status;
 
+///////////jason2016-03-07///////
+	status = platform_device_register(&keyboard_hid);
+		if (status < 0) {
+			printk("____ reg failed\n");
+			platform_device_unregister(&keyboard_hid);
+			return status;
+		}
+		status = platform_device_register(&mouse_hid);
+				if (status < 0) {
+					printk("____ reg failed\n");
+					platform_device_unregister(&mouse_hid);
+					return status;
+				}
+
+
+
+/////////jason2016-03-07//////////////
+
 	status = platform_driver_probe(&hidg_plat_driver,
 				hidg_plat_driver_probe);
 	if (status < 0)
@@ -296,6 +459,8 @@ module_init(hidg_init);
 static void __exit hidg_cleanup(void)
 {
 	usb_composite_unregister(&hidg_driver);
+	platform_device_unregister(&keyboard_hid);
+	platform_device_unregister(&mouse_hid);
 	platform_driver_unregister(&hidg_plat_driver);
 }
 module_exit(hidg_cleanup);

hid_gadget_test.c:
#gcc hid_gadget_test.c -o hid_gadget_test

use:
#modprobe g_hid
#hid_gadget_test /dev/hidg0 keyboard
#hid_gadget_test /dev/hidg1 mouse










